;-------------------------------------------------------------------------------
; Example parameter file for FSI simulations
; This file contains all possible parameters. When actually running something,
; you don't need to have all of them; all have their defaults which are loaded
; if a value is not found.
; When adding new parameters, please keep in mind to add them here.
;-------------------------------------------------------------------------------

; Define the resolution
[Resolution]
nx=512;
ny=512;
nz=256;

[Time]
; final time
Tmax=6.0;
; maximum number of time steps. if not set, unlimited
; nt=;
; Time stepper for Fluid
iTimeMethodFluid=FSI_AB2_staggered; RK2, RK4, FSI_AB2_iteration, FSI_AB2_staggered, FSI_AB2_semiimplicit
CFL=0.15;
; fix time step (no matter what)
dt_fixed=;
; semi-fix time step (cannot be larger than dt_max but may well be smaller)
dt_max=;
; intelligent dt? (make sure you miss neither of tsave/tend/tintegral/tslice)
; may cause problems with AB2!!
intelligent_dt=yes;


[ReynoldsNumber]
; viscosity f√ºr navier-stokes. note density is always unity (we normalized that)
nu=1.477e-4;

[FSI-equation]
; the fluid-structure interaction module, the actual flusi code, can run on two equations
; Navier-stokes incompressible or artificial compressibility. both are discretized with
; Fourier. Default is Navier-Stokes. Does not affect MHD part of the code.
equation=navier-stokes; artificial-compressibility

[artificial-compressibility]
c_0=20.0;
gamma_p=1.0;
acm_inipressure=flusi-spectral; zero
acm_sponge=0;

[InitialCondition]
; currently the follwing is available: "VortexRing", "turbulence", "MeanFlow"
; "quiescent"  to retake a backup: "backup::file.h5"
; the option "infile" requires specifying "file_ux=ux.h5", "file_uy=uy.h5",....
; "turbulence_rogallo": random field with given spectrum
; "random-given-spectrum": improved version of rogallo, can read a spectrum from file, specify file below.
inicond=quiescent;
; parameters for case "turbulence":
nu_smoothing=1.0e-5;
; omega1 is maximum vorticity in "turbulence" case and <E_kin> in "turbulence_rogallo" case
omega1=200.0;
 ; parameters for case "infile"
file_ux=none;
file_uy=none;
file_uz=none;
file_p=none;
; if inicond reads a spectrum: (txt file, no header or footer, nothing fancy)
inicond_spectrum_file=spectrum.txt;


[Penalization]
; use penalization method or not? (superseeds following parameters)
iPenalization=1;
; does the obstacle move?
iMoving=1;
; which mask to set? (sphere, Flapper, cylinder, moving_cylinder, turek_wan,
; Insect, noncircular_cylinder, Flexibility, couette, empty,romain_open_cavity)
; note noncircular_cylinder reads in shape.in
; from_file::mask_00.h5 reads from file. you can then also set solid velocity
iMask=Flexible_wing;
; if mask is "from_file", set also constant and homogeneous solid velocity:
us_fixed=0 0 0;
; penalization parameter
eps=5.66e-4;
; cavity around the domain? (this is independent of iMask)
; note this may be in conflict with mean flow forcing
; (use iCavity=yes; but set iMeanFlow=0;). Freestream cavity forces flow to umean given in
; meanflow setion. for freestream_smooth, the thickness is given in thick_wall
; choices: yes/o/freestream/freestream_smooth
iCavity=no;
; cavity wall thickness in gridpoints
; note due to periodicity, effective thickness is twice that value
cavity_size=0;
; compute forces/toqrues or dont?
compute_forces=1;
; use unsteady corrections?
unst_corrections=1;
; channel walls? (allowed: no, xy, xz, xy_sliding, xz_sliding, turek)
iChannel=no;
thick_wall=0.2;
pos_wall=0.3;
; periodization of coordinates (i.e. an insect can leave on one side and re-enter
; on the opposite side). NOTE: causes overhead, use only if required.
periodic=no;

[Geometry]
; domain size
xl=4.0; new: default value is 2*pi
yl=4.0;
zl=2.0;
Size=1.0; generic size parameter
alpha=0.0; generic angle parameter
; Position of obstacle (not used for insects)
x0=2.0;
y0=2.0;
z0=1.0;


[Insects]
;-------------------------------------------------------------------------------
; Body geometry
x_pivot_r=0.05 -0.2165 0.0; (vector) position of right wing in body system
x_pivot_l=0.05 +0.2165 0.0; (vector) position of left wing in body system
; Body ( nobody, suzuki_thin_rod, jerry, hawkmoth, particle, platicle, coin, sphere, drosophila,
; drosophila_maeda, drosophila_slimm, bumblebee
; mosquito_iams, pyramid, cone, birch_seed)
BodyType=drosophila
HasDetails=all; legs; antennae_proboscis; no;
RightWing=yes;
LeftWing=yes;
b_body=0.2;
L_body=1.0;
R_head=0.20;
R_eye=0.075;
x_head=0.4 0.0 0.0; (vector)
x_eye_r=; (vector)
x_eye_l=; (vector)
J_body_yawpitchroll=1.0 1.0 1.0; Body moment of inertia in body reference frame
mass=1.0; total mass of animal
gravity=1.0; negative: falling in negative z-direction
;-------------------------------------------------------------------------------
; Wing geometry (Shapes: rectangular, TwoEllipses, pointcloud, mosquito_iams,
; suzuki), Fourier wings: pieris-brassicae1, drosophila, drosophila_mutated, drosophila_maeda,
; drosophila_sun, drosophila_sandberg, bumblebee, b_ignitus, flapper_sane, flapper_dickinsonII,
; robofly_dickinson, hawkmoth1, hawkmoth2, from_file::MY_WING_FILE.ini
WingShape=drosophila;
; if wingshape=pointcloud, read the cloud from this file:
pointcloudfile=calliphora.txt
b_top=0.1; if WingShape=TwoEllipses, thickness of forward ellipse, if WingShape=rectangular, above rotation axis
b_bot=0.3; if WingShape=TwoEllipses, thickness of backward, if WingShape=rectangular, below rotation axis
; length of the wing, root to tip (yw-direction). Note for most wings, you do not
; need to set it (only used in: mosquito_iams, rectangular, TwoEllipses).
L_span=1.0;
WingThickness=; default thickness is 4*dx
; wing inertia tensor (used to compute inertial power)
Jxx=0.0;
Jyy=0.0;
Jzz=0.0;
Jxy=0.0;
;-------------------------------------------------------------------------------
; Body motion
; motion of the body: (tethered, free_flight)
BodyMotion=tethered;
x0=2 2 3; initial (or tethered) position
v0=0 0 0; inital velocity
yawpitchroll_0=90.0 60.0 0.0; initial (or tethered) orientation in degrees
eta0=90.0; stroke plane angle in degrees
DoF=111111; x,y,z,yaw,pitch,roll DoF on=1 or off=0
;-------------------------------------------------------------------------------
; Wing motion
; (types: Drosophila_hovering_fry, Drosophila_hovering_maeda, flapper_sane,
; flapper_dickinson, takeoff, simplified, from_file, none)
FlappingMotion_right=Drosophila_hovering_fry;
FlappingMotion_left=Drosophila_hovering_fry;
; if flappingmotion=="from_file", which file to use?
infile=motion.in;
wing_fsi=no;
init_alpha_phi_theta=0.0 0.0 0.0;
;-------------------------------------------------------------------------------


[MeanFlow]
; type of mean flow (free/constant/dynamic)
; free: do nothing particular about the mean flow
; fixed: fix mean flow to values given here
; dynamic: solve mean flow eqn for a given (domain-independent) fluid mass
iMeanFlow_x=fixed;
iMeanFlow_y=fixed;
iMeanFlow_z=fixed;
; if "dynamic", this is the mass of the fluid
m_fluid=10.0;
; if "dynamic" and mean flow at t=0 is not zero, the forces are singular
; at the beginning. use the startup conditioner to avoid large accelerations in
; mean flow at the beginning
iMeanFlowStartupConditioner=no;
tau_meanflow=0.0;
T_release_meanflow=0.0;
; if "fixed" then this is mean velocities:
ux=0.0;
uy=0.0;
uz=0.0;

[Sponge]
; use a vorticity sponge or not?
iVorticitySponge=yes;
; what "mask" to use? (note: you can use cavity without actual cavity walls
; ie iCavity=no)
; available: cavity, xmin_xmax_ymin_ymax, xmin_xmax, xmin_xmax_zmin_zmax, top_cover
iSpongeType=cavity;
eps_sponge=1e-1;
sponge_thickness=16; in grid points

[Saving]
; Time interval for saving fields
tsave=0.01;
; do not save fields before
tsave_first=0.d0;
; Number of hours between saving runtime backups
truntime=1.0;
; Maximum number of walltime hours allowed for simulation
wtimemax=100.0;
; keep only one period of snapshots? (assumes T=1.0 period time)
save_only_one_period=no;
; if saving only one period, this is the period time:
tsave_period=1.0;
; naming scheme for files: time, timestep
naming=time;
; precision of fields (single/double)
field_precision=single;
; field striding (save every 2nd, third, etc point, default: 1)
striding=1;
; Time interval for saving integral quantities
tintegral=0.01;
; Save drag every itdrag time steps
itdrag=10;
; save beam (if in use) every itbeam time steps
itbeam=2;
; make a backup or dont
iDoBackup=1;
; what fields to save?
iSaveVelocity=1;
iSavePress=1;
iSaveVorticity=0;
iSaveMagVorticity=1;
iSaveMask=1;
iSaveSolidVelocity=0;
# save spectrum every itdrag / tdrag times?
iSaveSpectrae=no;

[Forcing]
; Forcing for isotropic turbulence. To be used with cubic boxes (nx=ny=nz and xl=yl=zl=2*pi)
; It is probably best to use RK4 scheme with larger CFL number, as it will be cheaper than AB2
; 	"machiels" forcing tries to impose a given dissipation rate (eps_forcing below)
; 	"kaneda" forcing compensates the loss of energy through frictiong (parameter eps_forcing unused)
forcing_type=none; machiels, kaneda
; force wavenumbers kf and kf+1 (the shell is always two wavenumbers thick in the
; current implementation
kf=0;
; machiels forcing imposes this dissipation rate: (unused in kaneda's forcing)
eps_forcing=0;

[Dealiasing]
iDealias=1; 1=yes 0=no (you shouldnt use 0)


[PassiveScalar]
; on/off switch, superseeds all following
use_passive_scalar=0; 0=off, 1=on
; how many passive scalars? specify their parameters individually
n_scalars=1;
; stop when the scalar fails?
stop_on_fail=yes;


[Scalar1]
; diffusivity
kappa=0.01;
; penalization
eps_scalar=1.0e-4;
; initial condition for scalar dirstibutions
inicond=right_left_discontinuous;
; source term (dirichlet condition on scalar): gauss_blob, none
sourceterm=no;
; 4d vectors x,y,z,sigma for gauss_blob source
sourceterm_x0=1.0 1.0 1.0 0.01;


[SolidModel]
; use solid model yes or no? (superseeds all following)
use_solid_model=no;
; resolution
ns=32;
; interpolation method
interp=delta;
; dimensionless density, stiffness. note this is a WIDTH specific quantity, i.e.
; it is multiplied by the width in the rigid direction, which may vary along the
; beam. note the width is NOT NECESSARILY L_span but is dictated by the choice
; plate_shape and L_span in combination
mue=0.0571;
eta=0.008;
; gravity
gravity=0.00;
; damping coefficient
sigma=0.0;
; when is the beam released?
T_release=0.0;
tau=0.0;
; time marching algorithm
TimeMethodSolid=BDF2;
; Options for the embedding of the beam in the 3D domain, for the mask etc
; available options:
; "fixed_middle" plate in the middle of domain bending in xy, z is height
; "pitching_middle" plate in the middle of domain bending in xy, z is height, imposed pitching
imposed_motion_leadingedge=swimmer;
f=1.0;
; spanwise length, for bounding boxes only (chordwise length is always unity)
L_span=1.00;
; (half) beam thickness (centerline-interface)
t_beam=0.15;
; how mouch smoothing (in grid points)
N_smooth=3.0;
; cylinder at the leading edge?
has_cylinder=no;
R_cylinder=0.0;
; infinite span? (you still have to set L_span a bit smaller than zl)
infinite=no;
; shape of the plate in the rigid direction (rectangular, fish). note the shape
; also modifies the effective stiffness and density, \mu(s) and \eta(s)
plate_shape=fish;
; debug pressure?
debug_pressure=0;

[Flexible_wing]
;switch on solid solver for flexible wings
use_flexible_wing_model=yes;
; interpolation method for pressure
wing_interp=delta;
; switch between one-way and two-way coupling FSI
activate_press_force=yes;
; time marching algorithm
TimeMethodFlexibleSolid=prescribed_wing;BDF2;
; origin where the wing is put
x0= 2.0;
y0= 2.0;
z0= 1.0;
;Wing motion
Motion=prescribed_revolving_wing;stationary;simple_harmonic;revolving_Zimmerman;
; wing thickness
t_wing=;
wing_smoothing=;

EIy= 5.5533e-5; 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5 5.5533e-5;1.5533e-6;
EIz= 5.9413e-04; 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04 5.9413e-04;9.9413e-05;
EIy_with_BC= 1.2427e-4; 1.2427e-4 1.2427e-4 1.2427e-4;
EIz_with_BC= 1e-3; 1e-3 1e-3 1e-3;

ke_veins=1e4; 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4 1e4;
ke_veins_with_BC=1e4;
ke_membranes=8.5e1;

; initial angle of wing with respect to the local wing coordinate system
Wing_angle_x=0.78539;
Wing_angle_y=0.0;
Wing_angle_z=0.0;-1.9708;-0.78539;

density_veins=5e-8; 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8 5e-8; 1e-8;
density_veins_with_BC=5e-8; 5e-8 5e-8 5e-8;
density_membranes=5e-8;

Gravity= 0.0 0.0 0.0;
T_release=0.0;
tau=0.0;

[TurbulentInlet]
use_turbulent_inlet=no;
rescale=1.d0;
inlet_thickness=48;

[Averaging]
; compute averages?
time_avg=no;
; compute time avg velocity?
vel_avg=yes;
; compute time avg kinetic energy?
ekin_avg=no;
; compute time avg enstrophy?
enstrophy_avg=yes;
; when to start averaging?
tstart_avg=0.0;
; write only to one file?
save_one_only=yes;

[SaveSlices]
use_slicing=no;
slice1=12;
slice2=16;
slice3=45;
slice4=45;
; save every itslice time steps
itslice=2;
; and/or every tslice time
tslice=0.01;
; but not before tslice_first
tslice_first=0.0;
ncache_slices=250;
